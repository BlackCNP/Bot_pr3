

import telebot
from telebot import types
import os


import weather_handler
import currency_handler
import other_functions_handler


API_TOKEN = '7586371533:AAHvcVQRf2ybvCG69RNP20cEOnhC4wlAWRY'


bot = telebot.TeleBot(API_TOKEN)



movies_db = {
    "–ö–æ–º–µ–¥—ñ—è": [
        {"photo": "comedy1.png", "name": "–°—É–ø–µ—Ä–ø–µ—Ä—Ü—ñ", "description": "–î–≤–æ—î –Ω–µ—Ä–æ–∑–ª—É—á–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤-—Å—Ç–∞—Ä—à–æ–∫–ª–∞—Å–Ω–∏–∫—ñ–≤ –Ω–∞–º–∞–≥–∞—é—Ç—å—Å—è –≤—Ä–∞–∑–∏—Ç–∏ –¥—ñ–≤—á–∞—Ç –ø–µ—Ä–µ–¥ –≤–∏–ø—É—Å–∫–æ–º, –ø–æ—Ç—Ä–∞–ø–ª—è—é—á–∏ —É –±–µ–∑–ª—ñ—á –∫—É–º–µ–¥–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π.", "rating": 7.6, "price": 60},
        {"photo": "comedy2.png", "name": "–ú–∞—á–æ —ñ –ë–æ—Ç–∞–Ω", "description": "–î–≤–æ—î –Ω–µ–≤–¥–∞–ª–∏—Ö –ø–æ–ª—ñ—Ü–µ–π—Å—å–∫–∏—Ö –ø—ñ–¥ –ø—Ä–∏–∫—Ä–∏—Ç—Ç—è–º –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –¥–æ —à–∫–æ–ª–∏, —â–æ–± –≤–∏–∫—Ä–∏—Ç–∏ –Ω–∞—Ä–∫–æ–º–µ—Ä–µ–∂—É, —ñ –∑–Ω–æ–≤—É –ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç—å –ø—ñ–¥–ª—ñ—Ç–∫–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏.", "rating": 7.2, "price": 60},
    ],
    "–î—Ä–∞–º–∞": [
        {"photo": "drama1.png", "name": "–í—Ç–µ—á–∞ –∑ –®–æ—É—à–µ–Ω–∫–∞", "description": "–ù–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∑–∞—Å—É–¥–∂–µ–Ω–∏–π –±–∞–Ω–∫—ñ—Ä –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∫–∏ —É –≤'—è–∑–Ω–∏—Ü—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –Ω–∞–¥—ñ—é —Ç–∞ –ø–ª–∞–Ω—É—é—á–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω—É –≤—Ç–µ—á—É.", "rating": 9.3, "price": 60},
        {"photo": "drama2.png", "name": "–ó–µ–ª–µ–Ω–∞ –º–∏–ª—è", "description": "–Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞–≥–ª—è–¥–∞—á–∞ –≤ –±–ª–æ—Ü—ñ —Å–º–µ—Ä—Ç–Ω–∏–∫—ñ–≤ –≤'—è–∑–Ω–∏—Ü—ñ —Ç–∞ –π–æ–≥–æ —Å—Ç–æ—Å—É–Ω–∫—ñ–≤ –∑ –Ω–µ–∑–≤–∏—á–∞–π–Ω–∏–º —É–≤'—è–∑–Ω–µ–Ω–∏–º, —â–æ –≤–æ–ª–æ–¥—ñ—î –¥–∏–≤–æ–≤–∏–∂–Ω–∏–º–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç—è–º–∏.", "rating": 8.6, "price": 60},
    ],
    "–ë–æ–π–æ–≤–∏–∫": [
        {"photo": "action1.png", "name": "–¢–µ–º–Ω–∏–π –ª–∏—Ü–∞—Ä", "description": "–ë–µ—Ç–º–µ–Ω –ø—Ä–æ—Ç–∏—Å—Ç–æ—ó—Ç—å —Ö–∞–æ—Ç–∏—á–Ω–æ–º—É –≥–µ–Ω—ñ—é –∑–ª–æ—á–∏–Ω–Ω–æ—Å—Ç—ñ - –î–∂–æ–∫–µ—Ä—É, —è–∫–∏–π –ø—Ä–∞–≥–Ω–µ –∑–∞–Ω—É—Ä–∏—Ç–∏ –ì–æ—Ç–µ–º —É –∞–Ω–∞—Ä—Ö—ñ—é.", "rating": 9.0, "price": 60},
        {"photo": "action2.png", "name": "–î–∂–æ–Ω –í—ñ–∫", "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –∫–æ–ª–∏—à–Ω—ñ–π –Ω–∞–π–º–∞–Ω–∏–π –≤–±–∏–≤—Ü—è –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑—ñ —Å–ø–æ–∫–æ—é, —â–æ–± –ø–æ–º—Å—Ç–∏—Ç–∏—Å—è –≥–∞–Ω–≥—Å—Ç–µ—Ä–∞–º, —è–∫—ñ –∑–∞–±—Ä–∞–ª–∏ —É –Ω—å–æ–≥–æ –Ω–∞–π–¥–æ—Ä–æ–∂—á–µ.", "rating": 7.4, "price": 60},
    ]
}

user_data = {}


STATE_AWAITING_EMAIL = 'awaiting_email'




def get_movie_details(movie_name):
    for genre_movies in movies_db.values():
        for movie in genre_movies:
            if movie['name'] == movie_name:
                return movie
    return None



@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    continue_button = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data='continue_welcome')
    markup.add(continue_button)
    bot.send_message(chat_id,
                     "–í—ñ—Ç–∞—é –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤—ñ–¥–µ–æ–ø—Ä–æ–¥—É–∫—Ü—ñ—ó. –Ø —Ç—É—Ç, –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üòâ",
                     reply_markup=markup)
    if chat_id in user_data: del user_data[chat_id]



def show_main_menu(chat_id, message_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    genre_button = types.InlineKeyboardButton("üé¨ –û–±—Ä–∞—Ç–∏ –∂–∞–Ω—Ä", callback_data='select_genre')
    other_button = types.InlineKeyboardButton("‚öôÔ∏è –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", callback_data='other_functions')
    markup.add(genre_button, other_button)
    caption = "–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
    photo_path = 'menu.png'
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}]: {e}")
    try:
        if os.path.exists(photo_path):
            with open(photo_path, 'rb') as photo:
                 bot.send_photo(chat_id, photo, caption=caption, reply_markup=markup)
        else:
             print(f"[–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è]: –§–∞–π–ª {photo_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞—é —Ç–µ–∫—Å—Ç.")
             bot.send_message(chat_id, caption, reply_markup=markup)
    except Exception as e:
         print(f"[–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é]: {e}")
         bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é. " + caption, reply_markup=markup)

def show_genre_selection(chat_id, message_id):
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [types.InlineKeyboardButton(genre, callback_data=f'genre_{genre}') for genre in movies_db.keys()]
    markup.add(*buttons)
    back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='back_to_main_menu')
    markup.add(back_button)
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∂–∞–Ω—Ä—ñ–≤]: {e}")
    bot.send_message(chat_id, "–ù–∞—Ä–∞–∑—ñ –º–∏ –º–∞—î–º–æ —Ñ—ñ–ª—å–º–∏ —Ç–∞–∫–∏—Ö –∂–∞–Ω—Ä—ñ–≤:", reply_markup=markup)
    if chat_id in user_data:
        user_data[chat_id].pop('selected_movie_name', None)
        user_data[chat_id].pop('price', None)

def show_movies_in_genre(chat_id, message_id, genre):
    if genre in movies_db:
        markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [types.InlineKeyboardButton(movie['name'], callback_data=f'movie_{movie["name"]}') for movie in movies_db[genre]]
        markup.add(*buttons)
        back_button = types.InlineKeyboardButton("‚¨ÖÔ∏è –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∂–∞–Ω—Ä", callback_data='select_genre')
        markup.add(back_button)
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            print(f"[–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Ñ—ñ–ª—å–º—ñ–≤]: {e}")
        bot.send_message(chat_id, f"–§—ñ–ª—å–º–∏ –∂–∞–Ω—Ä—É '{genre}':", reply_markup=markup)
    else:
         print(f"[–ü–æ–º–∏–ª–∫–∞]: –°–ø—Ä–æ–±–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏ –¥–ª—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∂–∞–Ω—Ä—É '{genre}' –¥–ª—è {chat_id}")
         try: bot.delete_message(chat_id, message_id)
         except: pass
         bot.send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –ñ–∞–Ω—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

def show_movie_details(chat_id, message_id, movie_name):
    movie = get_movie_details(movie_name)
    if movie:
        if chat_id not in user_data: user_data[chat_id] = {}
        user_data[chat_id]['selected_movie_name'] = movie['name']
        user_data[chat_id]['price'] = movie['price']
        markup = types.InlineKeyboardMarkup(row_width=1)
        confirm_button = types.InlineKeyboardButton("–¢–∞–∫, –æ—Ñ–æ—Ä–º–ª—é—î–º–æ!", callback_data=f'order_confirm_{movie_name}')
        change_genre_button = types.InlineKeyboardButton("–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –∂–∞–Ω—Ä", callback_data='select_genre')
        current_genre = user_data.get(chat_id, {}).get('selected_genre')
        if current_genre:
             change_movie_button = types.InlineKeyboardButton("–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ñ—ñ–ª—å–º", callback_data=f'genre_{current_genre}')
             markup.add(confirm_button, change_genre_button, change_movie_button)
        else:
             markup.add(confirm_button, change_genre_button)
             print(f"[–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è]: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∂–∞–Ω—Ä –¥–ª—è {chat_id} –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –¥–µ—Ç–∞–ª–µ–π '{movie_name}'")
        caption = f"*{movie['name']}*\n\n{movie['description']}\n\n–†–µ–π—Ç–∏–Ω–≥ IMDB: {movie['rating']}\n–¶—ñ–Ω–∞: {movie['price']} –≥—Ä–Ω\n\n*–û—Ñ–æ—Ä–º–ª—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?*"
        photo_path = movie['photo']
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            print(f"[–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –¥–µ—Ç–∞–ª–µ–π]: {e}")
        try:
            if os.path.exists(photo_path):
                with open(photo_path, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption=caption, reply_markup=markup, parse_mode='Markdown')
            else:
                 print(f"[–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è]: –§–∞–π–ª {photo_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞—é —Ç–µ–∫—Å—Ç.")
                 bot.send_message(chat_id, caption, reply_markup=markup, parse_mode='Markdown')
        except Exception as e:
             print(f"[–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ñ—ñ–ª—å–º—É]: {e}")
             bot.send_message(chat_id, f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ.\n{caption}", reply_markup=markup, parse_mode='Markdown')
    else:
        print(f"[–ü–æ–º–∏–ª–∫–∞]: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª—ñ –¥–ª—è —Ñ—ñ–ª—å–º—É '{movie_name}' –¥–ª—è {chat_id}")
        try: bot.delete_message(chat_id, message_id)
        except: pass
        bot.send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ü–µ–π —Ñ—ñ–ª—å–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π.")

def ask_final_confirmation(chat_id, message_id):
    movie_name = user_data.get(chat_id, {}).get('selected_movie_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ—ñ–ª—å–º')
    if movie_name == '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ—ñ–ª—å–º':
         print(f"[–ü–æ–º–∏–ª–∫–∞]: –°–ø—Ä–æ–±–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ—ñ–ª—å–º—É –¥–ª—è {chat_id}")
         try: bot.delete_message(chat_id, message_id)
         except: pass
         bot.send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: —Ñ—ñ–ª—å–º –Ω–µ –≤–∏–±—Ä–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ /start")
         return
    markup = types.InlineKeyboardMarkup(row_width=2)
    yes_button = types.InlineKeyboardButton("–¢–∞–∫!", callback_data='final_confirm_yes')
    no_button = types.InlineKeyboardButton("–ù—ñ, —Ö–æ—á—É –∑–º—ñ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data='final_confirm_no')
    markup.add(yes_button, no_button)
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –ø–µ—Ä–µ–¥ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º]: {e}")
    bot.send_message(chat_id, f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ñ—ñ–ª—å–º \"{movie_name}\"?", reply_markup=markup)

#  –õ–û–ì–Ü–ö–ê –û–ë–†–û–ë–ö–ò –î–Ü–ô –ö–û–†–ò–°–¢–£–í–ê–ß–ê  

def handle_order_choice(chat_id, message_id, callback_data):
    action_parts = callback_data.split('_')
    if len(action_parts) > 1 and action_parts[1] == 'confirm':
        ask_final_confirmation(chat_id, message_id)

def handle_final_confirmation(chat_id, message_id, callback_data):
    if callback_data == 'final_confirm_yes':
        try:
            bot.edit_message_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—ñ–ª—å–º:",
                                  chat_id, message_id, reply_markup=None)
            if chat_id not in user_data: user_data[chat_id] = {}
            user_data[chat_id]['state'] = STATE_AWAITING_EMAIL
        except Exception as e:
            print(f"[–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id} –¥–ª—è –∑–∞–ø–∏—Ç—É email]: {e}")
            try: bot.delete_message(chat_id, message_id)
            except: pass
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—ñ–ª—å–º:")
            if chat_id not in user_data: user_data[chat_id] = {}
            user_data[chat_id]['state'] = STATE_AWAITING_EMAIL
    elif callback_data == 'final_confirm_no':
        if chat_id in user_data:
            user_data[chat_id].pop('selected_movie_name', None)
            user_data[chat_id].pop('price', None)
        show_genre_selection(chat_id, message_id)


#  –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –û–ë–†–û–ë–ù–ò–ö–Ü–í –ó –Ü–ù–®–ò–• –ú–û–î–£–õ–Ü–í 

other_functions_handler.register_handlers(bot, user_data) #
weather_handler.register_handlers(bot, user_data)         
currency_handler.register_handlers(bot, user_data)        


# –ì–û–õ–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø Inline –ö–ù–û–ü–û–ö 

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ—à—Ç—É –Ω–∞—Ç–∏—Å–∫–∞–Ω—å Inline –∫–Ω–æ–ø–æ–∫."""
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    if chat_id not in user_data: user_data[chat_id] = {}
    parts = call.data.split('_')
    callback_action = parts[0]
    callback_value = '_'.join(parts[1:]) if len(parts) > 1 else None
    try:
       
        if call.data == 'continue_welcome':
            bot.answer_callback_query(call.id)
            show_main_menu(chat_id, message_id)
        elif call.data == 'select_genre':
            bot.answer_callback_query(call.id)
            show_genre_selection(chat_id, message_id)
     
        elif call.data == 'back_to_main_menu': 
             bot.answer_callback_query(call.id)
             show_main_menu(chat_id, message_id)
        elif callback_action == 'genre':
            bot.answer_callback_query(call.id)
            if callback_value:
                user_data[chat_id]['selected_genre'] = callback_value
                show_movies_in_genre(chat_id, message_id, callback_value)
            else:
                 print(f"[–ü–æ–º–∏–ª–∫–∞]: –û—Ç—Ä–∏–º–∞–Ω–æ callback 'genre_' –±–µ–∑ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {chat_id}")
                 bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∂–∞–Ω—Ä—É.")
        elif callback_action == 'movie':
            bot.answer_callback_query(call.id)
            if callback_value:
                show_movie_details(chat_id, message_id, callback_value)
            else:
                 print(f"[–ü–æ–º–∏–ª–∫–∞]: –û—Ç—Ä–∏–º–∞–Ω–æ callback 'movie_' –±–µ–∑ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {chat_id}")
                 bot.send_message(chat_id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ—ñ–ª—å–º—É.")
        elif callback_action == 'order':
             
             handle_order_choice(chat_id, message_id, call.data)
        elif callback_action == 'final':
             
             handle_final_confirmation(chat_id, message_id, call.data)
        else:
             
             print(f"[–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è]: –ù–µ–≤—ñ–¥–æ–º–∏–π callback_data '{call.data}' –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É –≤—ñ–¥ {chat_id}")
             bot.answer_callback_query(call.id) 

    except Exception as e:
        print(f"[–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ handle_callback_query]: {e}")
        try: bot.answer_callback_query(call.id, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!")
        except: pass
        try: bot.send_message(chat_id, "–û–π! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. üò• –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑ /start")
        except Exception as send_error: print(f"[–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É]: {send_error}")




@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == STATE_AWAITING_EMAIL)
def get_email(message):
    chat_id = message.chat.id
    email = message.text.strip()
    if '@' in email and '.' in email.split('@')[-1] and len(email.split('@')[-1]) > 1:
        user_data[chat_id]['email'] = email
        user_data[chat_id]['state'] = None
        movie_name = user_data.get(chat_id, {}).get('selected_movie_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ—ñ–ª—å–º')
        price = user_data.get(chat_id, {}).get('price', 'N/A')
        final_text = f"üéâ –í—ñ—Ç–∞—é –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º!\n\n–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\nüé¨ *–í–∏–±—Ä–∞–Ω–∏–π —Ñ—ñ–ª—å–º:* {movie_name}\nüí∞ *–¶—ñ–Ω–∞:* {price} –≥—Ä–Ω\nüìß *–ü–æ—à—Ç–∞:* {email}\n\n–ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä üòä"
        bot.send_message(chat_id, final_text, parse_mode='Markdown')
    else:
        bot.reply_to(message, "–•–º, —Ü–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏. ü§î –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")


@bot.message_handler(content_types=['text'])
def handle_other_text(message):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏."""
    
    if user_data.get(message.chat.id, {}).get('state') is None:
         bot.send_message(message.chat.id, "–ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. üòï –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /start.")


# –ó–ê–ü–£–°–ö 
if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (movie_bot.py)...")
    try:
        bot.infinity_polling(skip_pending=True)
    except Exception as e:
        print(f"[–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É polling]: {e}")
    print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")