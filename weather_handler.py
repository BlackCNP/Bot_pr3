
import requests
import json
from datetime import datetime
import telebot
from telebot import types


WEATHER_API_KEY = '837b69b2fd6f3e781972f83bd4470fbe' 


STATE_AWAITING_CITY = 'awaiting_city'


def get_weather_data(city_name):
    """–û—Ç—Ä–∏–º—É—î —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –∑ OpenWeatherMap."""
    base_url = "http://api.openweathermap.org/data/2.5/weather?"
   
    current_date_str = datetime.now().strftime("%d.%m.%Y") 

    complete_url = base_url + "appid=" + WEATHER_API_KEY + "&q=" + city_name + "&units=metric&lang=uk"
    try:
        response = requests.get(complete_url)
        response.raise_for_status() 
        data = response.json()

        if data.get("cod") == 200 or data.get("cod") == "200": 
            main_data = data.get("main", {})
            weather_data_list = data.get("weather", [{}])
            weather_data = weather_data_list[0] if weather_data_list else {}
            wind_data = data.get("wind", {})
            temp = main_data.get("temp")
            description = weather_data.get("description", "–ù–µ–≤—ñ–¥–æ–º–æ").capitalize()
            wind_speed = wind_data.get("speed")
            city_display_name = data.get("name", city_name) 

            
            if temp is None or wind_speed is None:
                 print(f"[–ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏]: –í—ñ–¥—Å—É—Ç–Ω—ñ 'temp' –∞–±–æ 'wind_speed' –¥–ª—è {city_name}. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {data}")
                 return f"–í–∏–±–∞—á—Ç–µ, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ '{city_display_name}'."

            # –§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–≥—ñ–¥–Ω–æ –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            weather_report = (
                f"*{city_display_name}*: –ü–æ–≥–æ–¥–∞ –Ω–∞ {current_date_str}\n\n" 
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.0f}¬∞C\n" # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ —Ü—ñ–ª–æ–≥–æ
                f"üìù –û–ø–∏—Å: {description}\n"
                f"üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed:.1f} –º/—Å" # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫—É
            )
            return weather_report
        elif str(data.get("cod")) == "404": 
             return f"–í–∏–±–∞—á—Ç–µ, –º—ñ—Å—Ç–æ '{city_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. üòï –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É."
        else:
           
            error_message = data.get("message", "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ API")
            print(f"[–ü–æ–º–∏–ª–∫–∞ API –ø–æ–≥–æ–¥–∏]: –ö–æ–¥ {data.get('cod')}, –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {error_message}")
            return f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ API –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø–æ–≥–æ–¥–∏ ({error_message})."

    except requests.exceptions.HTTPError as http_err:
        print(f"[–ü–æ–º–∏–ª–∫–∞ API –ø–æ–≥–æ–¥–∏ - HTTPError]: {http_err}")
        try: 
            error_data = http_err.response.json()
            error_message = error_data.get("message", str(http_err))
        except: error_message = str(http_err)
        return f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É ({error_message}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except requests.exceptions.RequestException as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞ API –ø–æ–≥–æ–¥–∏ - RequestException]: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    except json.JSONDecodeError as e:
         print(f"[–ü–æ–º–∏–ª–∫–∞ API –ø–æ–≥–æ–¥–∏ - JSONDecodeError]: {e}")
         return "–í–∏–±–∞—á—Ç–µ, –æ—Ç—Ä–∏–º–∞–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–µ—Ä–≤—ñ—Å—É –ø–æ–≥–æ–¥–∏."
    except KeyError as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≥–æ–¥–∏ - KeyError]: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É."
    except Exception as e:
        print(f"[–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≥–æ–¥–∏ - –ó–∞–≥–∞–ª—å–Ω–∞]: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≥–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ---
def show_weather_prompt(chat_id, message_id, bot, user_data):
    """–ó–∞–ø–∏—Ç—É—î –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏, –≤–∏–¥–∞–ª—è—é—á–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    text = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏:"
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"[Weather] –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message_id}: {e}")

    # –ù–∞–¥—Å–∏–ª–∞—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –∑–∞–ø–∏—Ç–æ–º
    bot.send_message(chat_id, text)
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    if chat_id not in user_data: user_data[chat_id] = {}
    user_data[chat_id]['state'] = STATE_AWAITING_CITY


# --- –§—É–Ω–∫—Ü—ñ—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è ---
def register_handlers(bot, user_data):
    """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–æ–≥–æ–¥–∏."""

    
    @bot.callback_query_handler(func=lambda call: call.data == 'weather_start')
    def handle_weather_start_callback(call):
        """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–≥–æ–¥–∞'."""
        bot.answer_callback_query(call.id)
        # –í–∏–∫–ª–∏–∫–∞—î —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞–ø–∏—Ç–∞—î –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
        show_weather_prompt(call.message.chat.id, call.message.message_id, bot, user_data)

    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –æ—á—ñ–∫—É—î—Ç—å—Å—è –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('state') == STATE_AWAITING_CITY)
    def handle_city_input(message):
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏."""
        chat_id = message.chat.id
        city = message.text.strip()

        if not city: # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π –≤–≤—ñ–¥
            bot.reply_to(message, "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            
            return

        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        if chat_id in user_data:
            user_data[chat_id]['state'] = None

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 
        loading_message = bot.send_message(chat_id, f"‚è≥ –®—É–∫–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞ *{city}*...", parse_mode='Markdown')

        
        weather_report = get_weather_data(city)

       
        markup = types.InlineKeyboardMarkup()
      
        back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", callback_data='other_functions')
        markup.add(back_btn)

      
        bot.send_message(chat_id, weather_report, reply_markup=markup, parse_mode='Markdown')

    print("–û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≥–æ–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")